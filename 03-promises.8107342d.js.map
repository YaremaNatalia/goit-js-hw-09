{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAOpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAIpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAdwBL,EAAhCa,iBAAiB,UAkBtB,SAAkBC,GAChBA,EAAMC,iBAEN,MAAMC,EAAQC,SAASjB,EAAKkB,SAASb,MAAMc,OACrCC,EAAOH,SAASjB,EAAKkB,SAASE,KAAKD,OACnCE,EAASJ,SAASjB,EAAKkB,SAASG,OAAOF,OAGnB,IAArB,IAAIG,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EAEVnB,EAA7BmB,EAAUN,EAAQI,GAAQE,EAAW,IAChDC,MAAK,EAACnB,SAAEA,EAAQC,MAAEA,MACjBmB,EAAA1B,GAAS2B,OAAOC,QACd,uBAAqBtB,QAAiBC,MAAU,IAGnDsB,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MAClBmB,EAAA1B,GAAS2B,OAAOG,QACd,sBAAoBxB,QAAiBC,MAAU,IAIvDL,EAAK6B,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix'; //  відображення повідомлень користувачеві, замість window.alert()\n\nconst form = document.querySelector('.form');\n\n// const delayInput = document.querySelector(\"[name='delay']\");// звернення до елемента через name  за назвою\n// const delayInput = document.getElementsByName('delay')[0];// звернення до елемента через name перший в списку\n\nform.addEventListener('submit', onSubmit);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Fulfill\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onSubmit(event) {\n  event.preventDefault();\n\n  const delay = parseInt(form.elements.delay.value); // отримання цілого числа з інпуту форми\n  const step = parseInt(form.elements.step.value);\n  const amount = parseInt(form.elements.amount.value);\n\n  //створення промісів через цикл for\n  for (let position = 1; position <= amount; position += 1) {\n    // введення змінної позиції з присвоюванням одиниці\n    createPromise(position, delay + step * (position - 1))\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n  form.reset(); // !очищення форми при сабміті\n}\n\n// Значение delay определяется пользователем в форме, а затем для каждого вызова функции createPromise задержка увеличивается на значение шага (step), умноженного на текущую позицию (position) минус 1. Таким образом, для первого вызова позиция равна 1, а для последующих вызовов она будет увеличиваться на единицу.\n\n// Например, если пользователь ввел значение delay = 1000, step = 500, amount = 3, то для первого вызова функции задержка будет равна 1000, для второго вызова - 1500 (1000 + 1 * 500), а для третьего - 2000 (1000 + 2 * 500). Это позволяет создавать промисы с увеличивающейся задержкой между ними.\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delay1","parseInt","elements","value","step","amount","position1","then","$parcel$interopDefault","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.8107342d.js.map"}