{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAKCF,EAAhCG,iBAAiB,UAkBtB,SAAkBC,GAChBA,EAAMC,iBAEN,MAAMC,EAAQC,SAASP,EAAKQ,SAASC,MAAMC,OACrCC,EAAOJ,SAASP,EAAKQ,SAASG,KAAKD,OACnCE,EAASL,SAASP,EAAKQ,SAASI,OAAOF,OAC7C,IAAIG,EAAW,EAGgD,MAAzDC,EAAaC,aAAY,KAC7B,GAAIF,GAAYD,EAAQ,EA1BLI,EA2BaH,EA3BHJ,EA2BaH,EAAQK,GAAQE,EAAW,GA1BhE,IAAII,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEF,E,MAAUP,IAIpBU,EAAO,C,SAAEH,E,MAAUP,GAAQ,GAE5BA,EAAM,KAiBJe,MAAK,EAACR,SAAEA,EAAQP,MAAEA,MACjBgB,EAAA3B,GAAS4B,OAAOC,QACd,uBAAqBX,QAAiBP,MAAU,IAGnDmB,OAAM,EAACZ,SAAEA,EAAQP,MAAEA,MAClBgB,EAAA3B,GAAS4B,OAAOC,QACd,sBAAoBX,QAAiBP,MAAU,IAGrDI,GAAY,C,MAEZgB,cAAcf,GAzCpB,IAAuBE,EAAUP,CAyCF,GAE1BH,EAAQK,GAAQE,EAAW,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix'; //  відображення повідомлень користувачеві, замість window.alert()\n\nconst form = document.querySelector('.form');\n\n// const delayInput = document.querySelector(\"[name='delay']\");// звернення до елемента через name  за назвою\n// const delayInput = document.getElementsByName('delay')[0];// звернення до елемента через name перший в списку\n\nform.addEventListener('submit', onSubmit);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Fulfill\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onSubmit(event) {\n  event.preventDefault();\n\n  const delay = parseInt(form.elements.delay.value); // отримання цілого числа з інпуту форми\n  const step = parseInt(form.elements.step.value);\n  const amount = parseInt(form.elements.amount.value);\n  let position = 1; // введення змінної позиції з присвоюванням одиниці\n\n  // реалізація кількості промісів залежно від кількості в інпуті amount через метод setInterval\n  const intervalId = setInterval(() => {\n    if (position <= amount) {\n      const promise = createPromise(position, delay + step * (position - 1)); //зміна промісу через зміну затримки виведення\n      promise\n        .then(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n      position += 1; //позиція збільшується на один кожного інтервалу\n    } else {\n      clearInterval(intervalId); // зупинка інтервалу коли позиція досягла кількості amount\n    }\n  }, delay + step * (position - 1)); // інтервал затримки\n\n  // Значение delay определяется пользователем в форме, а затем для каждого вызова функции createPromise задержка увеличивается на значение шага (step), умноженного на текущую позицию (position) минус 1. Таким образом, для первого вызова позиция равна 1, а для последующих вызовов она будет увеличиваться на единицу.\n\n  // Например, если пользователь ввел значение delay = 1000, step = 500, amount = 3, то для первого вызова функции задержка будет равна 1000, для второго вызова - 1500 (1000 + 1 * 500), а для третьего - 2000 (1000 + 2 * 500). Это позволяет создавать промисы с увеличивающейся задержкой между ними.\n\n  //=======variant 2=========\n\n  //   for (let position = 1; position <= amount; position += 1) {\n  //     const promise = createPromise(position, delay + step * (position - 1));\n  //     promise\n  //       .then(({ position, delay }) => {\n  //         Notiflix.Notify.failure(\n  //           `✅ Fulfilled promise ${position} in ${delay}ms`\n  //         );\n  //       })\n  //       .catch(({ position, delay }) => {\n  //         Notiflix.Notify.failure(\n  //           `❌ Rejected promise ${position} in ${delay}ms`\n  //         );\n  //       });\n  //   }\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","addEventListener","event","preventDefault","delay1","parseInt","elements","delay","value","step","amount","position1","intervalId","setInterval","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","$parcel$interopDefault","Notify","failure","catch","clearInterval"],"version":3,"file":"03-promises.e6748249.js.map"}